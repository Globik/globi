<!DOCTYPE html>
<html>
<head>

<% include includes/head %>
<style>
.main {
    position:relative;padding:40px;display:block;
    width: 200px;
    height: 60px;
    margin: 50px auto;
}
.panel {
    background-color: #444;
    height: 34px;
    padding: 10px;
}
.panel a#login_pop, .panel a#join_pop {
    border: 2px solid #aaa;
    color: #fff;
    display: block;
    float: right;
    margin-right: 10px;
    padding: 5px 10px;
    text-decoration: none;
    text-shadow: 1px 1px #010;

    
    border-radius: 10px;
}
a#login_pop:hover, a#join_pop:hover {
    border-color: #eee;
}
.overlay {
    background-color: rgba(0, 0, 0, 0.6);
    bottom: 0;
    cursor: default;
    left: 0;
    opacity: 0;
    position: fixed;
    right: 0;
    top: 0;
    visibility: hidden;
    z-index: 1;
    transition: opacity .5s;
}
.overlay:target {
    visibility: visible;
    opacity: 1;
}
.popup {
    background-color: #fff;
    border: 3px solid #fff;
    display: inline-block;
    left: 50%;
    opacity: 0;
    padding: 15px;

    position: fixed;
    text-align: justify;
    top: 40%;
    height:300px;
    overflow-y:scroll;
   min-height:50px;
    visibility: hidden;

    z-index: 10;

    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);

    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
    -o-border-radius: 10px;
    border-radius: 10px;

    -webkit-box-shadow: 0 1px 1px 2px rgba(0, 0, 0, 0.4) inset;
    -moz-box-shadow: 0 1px 1px 2px rgba(0, 0, 0, 0.4) inset;
    -ms-box-shadow: 0 1px 1px 2px rgba(0, 0, 0, 0.4) inset;
    -o-box-shadow: 0 1px 1px 2px rgba(0, 0, 0, 0.4) inset;
    box-shadow: 0 1px 1px 2px rgba(0, 0, 0, 0.4) inset;

    -webkit-transition: opacity .5s, top .5s;
    -moz-transition: opacity .5s, top .5s;
    -ms-transition: opacity .5s, top .5s;
    -o-transition: opacity .5s, top .5s;
    transition: opacity .5s, top .5s;
}
.popup:hover{background-color:lightgray;}
.popup::-webkit-scrollbar{width:5px;}
.popup::-webkit-scrollbar:hover{width:5px;background-color:blue;}
.popup::-webkit-scrollbar-track{
box-shadow: inset 0 0 6px rgba(255,0,255,0.3);
border-radius:2px;
}
.popup::-webkit-scrollbar-thumb{
border-radius:2px;

background:rgba(0,255,0,0.8);
box-shadow:inset 0 0 6px rgba(0,0,0,0.5);
}
.popup::-webkit-srcrollbar-thumb:hover{
visisbility:visible;
background-color:rgba(24,255,20,0.6);}
.popup::-webkit-scrollbar-thumb:active{
background:rgba(255,0,0,0.4);
}


.overlay:target+.popup {
    top: 50%;
    opacity: 1;
    visibility: visible;
}
.close {
    background-color: rgba(0, 0, 0, 0.8);
    height: 30px;
    line-height: 30px;
    position: absolute;
    right: 0;
    text-align: center;
    text-decoration: none;
    top: -15px;
    width: 30px;

    -webkit-border-radius: 15px;
    -moz-border-radius: 15px;
    -ms-border-radius: 15px;
    -o-border-radius: 15px;
    border-radius: 15px;
}
.close:before {
    color: rgba(255, 255, 255, 0.9);
    content: "X";
    font-size: 24px;
    text-shadow: 0 -1px rgba(0, 0, 0, 0.9);
}
.close:hover {
    background-color: rgba(64, 128, 128, 0.8);
}
.popup p, .popup div {
    margin-bottom: 10px;
}
.popup label {
    display: inline-block;
    text-align: left;
    width: 120px;
}
.popup input[type="text"], .popup input[type="password"] {
    border: 1px solid;
    border-color: #999 #ccc #ccc;
    margin: 0;
    padding: 2px;

    -webkit-border-radius: 2px;
    -moz-border-radius: 2px;
    -ms-border-radius: 2px;
    -o-border-radius: 2px;
    border-radius: 2px;
}
.popup input[type="text"]:hover, .popup input[type="password"]:hover {
    border-color: #555 #888 #888;
}
</style>

</head>      

<body>
<div id="pagewrap">
<header id="header">
<% include includes/header %>		
</header>
<div id="content">
<article class="post clearfix">
<header>
<h1 class="post-title">
Post title
</h1>

<p class="post-meta">
<time class="post-date" datetime="2011-05-08" pubdate>Wednesday, 3 Oktober 2015</time> <em>in</em> <a href="#">Category</a></p>
</header>
<figure class="post-image">
<img class="imagefloat" src="/images/pic.png">
</figure>
<div id="divContent" contenteditable>
<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent</p>
<p>

For IE8 we can use the proprietary onpropertychange event, which also fires whenever the value property changes. This event is also available on versions less than 8, but a few small CSS tweaks will probably be needed to make the expanding text area work overall; I leave making it work in IE6 or IE7 as an exercise to the readers unlucky enough to have to support those ancient browsers.

Now, some of you may have spotted that, as we're no longer polling, the textarea won't resize if it has a fluid width and the window is resized. That brings us to our next improvement: we're going to make the browser resize the textarea automatically. But, I hear you cry, I thought you said this was impossible? Well, not quite. You can't do it automatically with just HTML and CSS, but all the JS needs to do is update the mirror element with the value of the textarea. It doesn't have to measure or explicitly set height. The trick is to position the textarea on top of the mirror element, both inside a relatively-positioned containing div. The textarea is positioned absolutely and given a width and height of 100% to make it fill the div. The mirror is positioned statically so it will expand to fit its contents. The containing div will then expand to fit the height of 
<p>
Example....
</p>
<div class="video">1.5em</div>
</div><!-- #divContent -->
</article>			
<ul>
<li><a href="#join_form" id="join_pop">Edit</a></li>
<li><a href="#">Comments (4)</a></li>
<li><a href="#">Pingbacks (1)</a></li>
<li>Category: <a href="#" title="Category">CSS</a></li>
<li>Status: </li>
</ul>


		
	</div>
<aside id="sidebar">
<% include includes/aside %>
</aside>
	
<footer id="footer">
<% include includes/footer %>
</footer>
</div>

<a href="#x" class="overlay" id="join_form"></a>
        
<div class="popup">
  <span id="fuckout" style="background-color:red;"></span>
  <span id="po" class="loading"></span>
<span id="tus">ddd</span>
     <h2>Text editor</h2>
</br><button onclick="saveArticle(this)">saveArticle</button></br>
<textarea id="articleContent" oninput="saveArticle(this)" rows="5" cols="54"  wrap="pysical" value="For edit"></textarea>
</br>
<button onclick="saveArticle(this)">saveArticle</button>   
<h2>Bla bla</h2>
            
<p>Please enter your details here</p>
            
</div>
<script>
var join_pop=document.getElementById('join_pop');
//var area=document.querySelector('textarea');//
var articleContent=document.getElementById('articleContent');
//var divHeader=document.getElementById('divHeader');
//var divDescription=document.getElementById('divDescription');
var divContent=document.getElementById('divContent');
//var out=document.getElementById('out');
//var po=document.getElementById('po');
//var checkvis=document.getElementById('checkvis');
var tus=document.getElementById('tus');
status.innerHTML="l";
join_pop.onclick=callRedactor;

function callRedactor(){
//alert('ok');
divContent.setAttribute('contenteditable',true);
articleContent.value=divContent.innerHTML;

}



function saveArticle(e){
 var errCount=0;
if(articleContent.value === ''){errCount++}
if(errCount === 0){
//showIndigo('Saving now...');
//var data={};
 //out.textContent=articleContent.value;
 divContent.innerHTML=articleContent.value;
 divContent.setAttribute('contenteditable',false);
tus.textContent="Article's contenteditable after editing will be false";
//alert('ok');
//alert('out.textContent :'+out.textContent);
//var numb=divContent.getAttribute('data-id');
//alert('data-id : '+numb);
 // data._id=numb;
  //data.article=divHeader.innerHTML;
  //data.cont=divDescription.innerHTML;
    //data.artBody=divContent.innerHTML;
  //data.artBody=out.textContent;
  //var data=JSON.stringify(data);
  //vax('post','/*******',data,onLoad,onError);
/**
  function onLoad(e){
  showIndigo('');
  po.innerHTML=this.responseText;
  }
**/
//setTimeout(callDB,1000);
} else
{ alert('Please fill in the field');}
}

articleContent.onkeydown=function(e){
if(e.keyCode == 13){
//alert('l');
insertMetachars('<br>','');
 
}
}

function insertMetachars(sStartTag, sEndTag) {
var bDouble = arguments.length > 1, 
oMsgInput = articleContent;


var nSelStart = oMsgInput.selectionStart, 
nSelEnd = oMsgInput.selectionEnd, sOldText = oMsgInput.value;
oMsgInput.value = sOldText.substring(0, nSelStart) + (bDouble ? sStartTag + sOldText.substring(nSelStart, nSelEnd) + sEndTag : sStartTag) + sOldText.substring(nSelEnd);
oMsgInput.setSelectionRange(bDouble || nSelStart === nSelEnd ? nSelStart + sStartTag.length : nSelStart, (bDouble ? nSelEnd : nSelStart) + sStartTag.length);
oMsgInput.focus();


}


//function(e){
//divContent.innerHTML=articleContent.value;
//};
</script>

</body>
</html>